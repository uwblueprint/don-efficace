openapi: 3.0.0
info:
  version: 1.0.0
  title: UW Blueprint Starter Code TypeScript API
  description: An API for the TypeScript Backend of Starter Code


# Authentication 
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    PasswordLogin:
      type: object
      required:
        - email, password
      properties:
        email:
          type: string
        password:
          type: string
    OAuthLogin:
      type: object
      required:
        - idToken
      properties:
        idToken:
          type: string


paths:
  /entities:
    get:
      security:
        - bearerAuth: []
      tags:
        - Entity
      description: Returns a list of entities
      responses:
        '200':
          description: Successfully returned a list of entities
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                      - intField, stringField, boolField, enumField, stringArrayField
                  properties:
                    intField:
                      type: integer
                    stringField:
                      type: string
                    stringArrayField:
                      type: array
                      items:
                        type: string
                    enumField:
                      type: string
                      enum: ["A", "B", "C", "D"]
                    boolField:
                      type: boolean
                    fileName:
                      type: string
        '401':
          description: Unauthorized
        '500':
          description: Invalid request


    post:
      security:
        - bearerAuth: []
      tags:
        - Entity
      description: Create a new entity
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                body:
                  type: string
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Successfully created a new entity
          content:
            application/json:
              schema:
                type: object
                required:
                  - intField, stringField, boolField, enumField, stringArrayField
                properties:
                  intField:
                    type: integer
                  stringField:
                    type: string
                  stringArrayField:
                    type: array
                    items:
                      type: string
                  enumField:
                    type: string
                    enum: ["A", "B", "C", "D"]
                  boolField:
                    type: boolean
                  fileName:
                    type: string
        '401':
          description: Unauthorized
        '500':
          description: Invalid request
  
  
  /entities/{id}:
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The entity ID
      tags:
        - Entity
      description: Returns an entity based on its ID
      responses:
        '200':
          description: Successfully returns entity based on ID
          content:
            application/json:
              schema:
                type: object
                required:
                  - intField, stringField, boolField, enumField, stringArrayField
                properties:
                  intField:
                    type: integer
                  stringField:
                    type: string
                  stringArrayField:
                    type: array
                    items:
                      type: string
                  enumField:
                    type: string
                    enum: ["A", "B", "C", "D"]
                  boolField:
                    type: boolean
                  fileName:
                    type: string
        '401':
          description: Unauthorized
        '500':
          description: Invalid ID


    put:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The entity ID
      tags:
        - Entity
      description: Edit an entity based on its ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                body:
                  type: string
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successfully edited entity based on ID
        '401':
          description: Unauthorized
        '500':
          description: Invalid request


    delete:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The entity ID
      tags:
        - Entity
      description: Delete an entity based on its ID
      responses:
        '200':
          description: Successfully deleted entity based on ID
        '401':
          description: Unauthorized
        '500':
          description: Invalid ID

  /entities/files/{fileName}:
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: fileName
          required: true
          schema:
            type: string
          description: The name of the file (UUID) associated with an entity
      tags:
        - Entity
      description: Returns a signed URL to the file associated with an entity
      responses:
        '200':
          description: Successfully returns the signed URL of the file
          content:
            application/json:
              schema:
                type: object
                required:
                  - fileURL
                properties:
                  fileURL:
                    type: string
        '401':
          description: Unauthorized
        '500':
          description: Invalid fileName

  /simple-entities:
    get:
      security:
        - bearerAuth: []
      tags:
        - SimpleEntity
      description: Returns a list of simple entities
      responses:
        '200':
          description: Successfully returned a list of simple entities
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                      - intField, stringField, boolField, enumField, stringArrayField
                  properties:
                    intField:
                      type: integer
                    stringField:
                      type: string
                    stringArrayField:
                      type: array
                      items:
                        type: string
                    enumField:
                      type: string
                      enum: ["A", "B", "C", "D"]
                    boolField:
                      type: boolean
        '401':
          description: Unauthorized
        '500':
          description: Invalid request


    post:
      security:
        - bearerAuth: []
      tags:
        - SimpleEntity
      description: Create a new simple entity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - intField, stringField, boolField, enumField, stringArrayField
              properties:
                intField:
                  type: integer
                stringField:
                  type: string
                stringArrayField:
                  type: array
                  items:
                    type: string
                enumField:
                  type: string
                  enum: ["A", "B", "C", "D"]
                boolField:
                  type: boolean
      responses:
        '201':
          description: Successfully created a new simple entity
          content:
            application/json:
              schema:
                type: object
                required:
                  - intField, stringField, boolField, enumField, stringArrayField
                properties:
                  intField:
                    type: integer
                  stringField:
                    type: string
                  stringArrayField:
                    type: array
                    items:
                      type: string
                  enumField:
                    type: string
                    enum: ["A", "B", "C", "D"]
                  boolField:
                    type: boolean
        '401':
          description: Unauthorized
        '500':
          description: Invalid request
  
  
  /simple-entities/{id}:
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The simple entity ID
      tags:
        - SimpleEntity
      description: Returns a simple entity based on its ID
      responses:
        '200':
          description: Successfully returns simple entity based on ID
          content:
            application/json:
              schema:
                type: object
                required:
                  - intField, stringField, boolField, enumField, stringArrayField
                properties:
                  intField:
                    type: integer
                  stringField:
                    type: string
                  stringArrayField:
                    type: array
                    items:
                      type: string
                  enumField:
                    type: string
                    enum: ["A", "B", "C", "D"]
                  boolField:
                    type: boolean
        '401':
          description: Unauthorized
        '500':
          description: Invalid ID


    put:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The simple entity ID
      tags:
        - SimpleEntity
      description: Edit a simple entity based on its ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - intField, stringField, boolField, enumField, stringArrayField
              properties:
                intField:
                  type: integer
                stringField:
                  type: string
                stringArrayField:
                  type: array
                  items:
                    type: string
                enumField:
                  type: string
                  enum: ["A", "B", "C", "D"]
                boolField:
                  type: boolean
      responses:
        '200':
          description: Successfully edited simple entity based on ID
        '401':
          description: Unauthorized
        '500':
          description: Invalid request


    delete:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The simple entity ID
      tags:
        - SimpleEntity
      description: Delete a simple entity based on its ID
      responses:
        '200':
          description: Successfully deleted simple entity based on ID
        '401':
          description: Unauthorized
        '500':
          description: Invalid ID

  /auth/login:
    post:
      tags:
        - Auth
      description: Login user. Supply either both email and password, or an Google OAuth idToken.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PasswordLogin'
                - $ref: '#/components/schemas/OAuthLogin'
      responses:
        '200':
          description:  Returns access token in response body and sets refreshToken as an httpOnly cookie
          content:
            application/json:
              schema:
                type: object
                properties:   
                  accessToken:
                    type: string
                  id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
        '500':
          description: Invalid request
  
  /auth/register:
    post:
      tags:
        - Auth
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email, password, firstName, lastName
              properties:
                email:
                  type: string
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '200':
          description:  Returns access token in response body and sets refreshToken as an httpOnly cookie
          content:
            application/json:
              schema:
                type: object
                properties:   
                  accessToken:
                    type: string
                  id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
        '500':
          description: Invalid request


  /auth/refresh:
    post:
      security:
        - bearerAuth: []
      tags:
        - Auth
      description: Refresh auth credentials
      responses:
        '200':
          description:  Returns access token in response body and sets refreshToken as an httpOnly cookie
          content:
            application/json:
              schema:
                type: object
                properties:   
                  accessToken:
                    type: string
        '401':
          description: Unauthorized
        '500':
          description: Invalid request
                  
                
  /auth/logout/{userid}:
    post:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userid
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The user ID
      tags:
        - Auth
      description: Logout as user
      responses:
        '204':
          description: Revokes all of the specified user's refresh tokens
        '401':
          description: Unauthorized
        '500':
          description: Invalid request


  /auth/resetPassword/{email}:
    post:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
      tags:
        - Auth
      description: Triggers password reset for user with specified email (reset link will be emailed)
      responses:
        '204':
          description: Successfully sent password reset email
        '401':
          description: Unauthorized
        '500':
          description: Invalid request


  /users:
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: userId
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The user ID
        - in: query
          name: email
          schema:
            type: string
          description: The user's email
      tags:
        - User
      description: Get all users, optionally filter by a userId or email query parameter to retrieve a single user
      responses:
        '200':
          description: Successfully returned a list of users, or a user filtered by id or email
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                      - id, firstName, lastName, email, role
                  properties:
                    id:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    email:
                      type: string
                    role:
                      type: string
        '400':
          description: Cannot query by both user and email
        '401':
          description: Unauthorized
        '500':
          description: Invalid request


    post:
      security:
        - bearerAuth: []
      tags:
        - User
      description: Create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName, lastName, role, email
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                role:
                  type: string
                  enum: ["User", "Admin"]
                email:
                  type: string
      responses:
        '201':
          description: Successfully created a new user
          content:
            application/json:
              schema:
                type: object
                required:
                    - id, firstName, lastName, email, role
                properties:
                  id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
        '401':
          description: Unauthorized
        '500':
          description: Invalid request

          
    delete:
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: userId
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The user ID
        - in: query
          name: email
          schema:
            type: string
          description: The user's email
      tags:
        - User
      description: Deletes a user by userId or email, specified through a query parameter
      responses:
        '204':
          description: Succesfully deleted user
        '400':
          description: Cannot query by both userId and email, invalid userId or email, userId or email is not a string, userId or email not supplied
        '401':
          description: Unauthorized
        '500':
          description: Invalid request

                
  /users/{userId}:
    put:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The user ID
      tags:
        - User
      description: Update the user with the specified userId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName, lastName, role, email
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                role:
                  type: string
                  enum: ["User", "Admin"]
                email:
                  type: string
      responses:
        '200':
          description: Successfully updated user
          content:
            application/json:
              schema:
                type: object
                required:
                    - id, firstName, lastName, email, role
                properties:
                  id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
        '401':
          description: Unauthorized
        '500':
          description: Invalid request

  /donations:
      get:
        security:
          - bearerAuth: []
        tags:
          - Donation
        description: Get all donations across all users
        responses:
          '200':
            description: Successfully got users
            content:
              application/json:
                schema:
                  type: object
                  required:
                      - id, user, user_id, amount, donation_date, cause, cause_id, is_recurring, confirmation_email_sent
                  properties:
                    id:
                      type: number
                    user_id:
                      type: string
                    amount:
                      type: number
                      format: float
                    donation_date:
                      type: string
                      format: date-time
                    cause_id:
                      type: number
                    is_recurring:
                      type: string
                      enum: ["None", "Weekly", "Monthly", "Annually"]
                    confirmation_email_sent:
                      type: boolean
          '401':
            description: Unauthorized
          '500':
            description: Invalid request

  /donations/{user_id}:
      get:
        security:
          - bearerAuth: []
        parameters:
          - in: path
            name: user_id
            required: true
            schema:
              # type: integer (postgres)
              # minimum: 1
              type: string
            description: The user ID
        tags:
          - Donation
        description: Get all donations across all users
        responses:
          '200':
            description: Successfully got users
            content:
              application/json:
                schema:
                  type: object
                  required:
                      - id, user, user_id, amount, donation_date, cause, cause_id, is_recurring, confirmation_email_sent
                  properties:
                    id:
                      type: number
                    user_id:
                      type: string
                    amount:
                      type: number
                      format: float
                    donation_date:
                      type: string
                      format: date-time
                    cause_id:
                      type: number
                    is_recurring:
                      type: string
                      enum: ["None", "Weekly", "Monthly", "Annually"]
                    confirmation_email_sent:
                      type: boolean
          '401':
            description: Unauthorized
          '500':
            description: Invalid request

  /donations/give:
    post:
      security:
        - bearerAuth: []
      tags:
        - Donation
      description: Create a new donation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                amount:
                  type: number
                donation_date:
                  type: string
                cause_id:
                  type: number
                is_recurring:
                  type: string
                confirmation_email_sent:
                  type: boolean
      responses:
        '201':
          description: Successfully created a new donation
          content:
            application/json:
              schema:
                type: object
                required:
                  - id, user_id, amount, donation_date, cause_id, is_recurring, confirmation_email_sent
                properties:
                  id:
                    type: number
                  user_id:
                    type: string
                  amount:
                    type: number
                    format: float
                  donation_date:
                    type: string
                    format: date-time
                  cause_id:
                    type: number
                  is_recurring:
                    type: string
                    enum: ["None", "Weekly", "Monthly", "Annually"]
                  confirmation_email_sent:
                    type: boolean
        '401':
          description: Unauthorized
        '500':
          description: Invalid request
  /stripe/create-checkout-session:
    post:
      security:
        - bearerAuth: []
      tags:
        - Stripe
      description: Create a new single payment Stripe checkout session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                  - amount, causeId, paymentMethod
              properties:
                amount:
                  type: integer
                causeId:
                  type: number
                paymentMethod:
                  type: string
                  description: One of "payment" or "subscription"
                interval:
                  type: string
                  description: One of "day", "week", "month" or "year". Required if paymentMethod = "subscription"
                intervalFrequency:
                  type: integer
                  description: Required if paymentMethod = "subscription". Max billing frequency of 3 years.
                customerId: 
                  type: string
                  description: A valid and existing Stripe customer Id. A new customerId will be created if not provided.

      responses:
        '200':
          description: Successfully created a checkout session
          content:
            application/json:
              schema:
                type: object
                required:
                  - url
                properties:
                  url:
                    type: string
        '500':
          description: Error creating payment checkout session.


