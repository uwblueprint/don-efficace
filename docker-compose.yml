version: "3.7"

services:
  frontend:
    container_name: de_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
    env_file:
      - ./frontend/.env

  ts-backend:
    container_name: de_ts_backend
    build:
      context: ./backend/typescript
      dockerfile: Dockerfile
    volumes:
      - ./backend/typescript:/app
      - /app/node_modules
    ports:
      - "5001:5001"
    dns:
      - 8.8.8.8
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env
      - ./backend/typescript/.env

  db:
    container_name: de_db
    image: postgres:12-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./db-init:/docker-entrypoint-initdb.d
    env_file:
      - ./.env
    environment:
      - POSTGRES_MULTIPLE_DATABASES=${POSTGRES_DB_DEV},${POSTGRES_DB_TEST}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  ngrok:
    image: ngrok/ngrok:latest
    platform: linux/arm64
    command: ngrok http ts-backend:5001
    ports:
      - "4040:4040"  # ngrok web interface
    depends_on:
      - ts-backend
    environment:
      - NGROK_AUTHTOKEN=${auth_token}
volumes:
  postgres_data:
